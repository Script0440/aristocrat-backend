import {
  Injectable,
  ConflictException,
  BadRequestException,
} from '@nestjs/common';
import { UsersService } from '../users/users.service';
import { JwtService } from '@nestjs/jwt';
import * as bcrypt from 'bcrypt';
import * as jwt from 'jsonwebtoken';
import { MailService } from 'src/mail/mail.service';

@Injectable()
export class AuthService {
  constructor(
    private readonly usersService: UsersService,
    private readonly jwtService: JwtService,
    private readonly mailService: MailService,
  ) {}

  async register(data: any) {
    if (!data.email || typeof data.email !== 'string' || !data.email.trim()) {
      throw new BadRequestException('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }

    const existing = await this.usersService.findByEmail(data.email);
    if (existing)
      throw new ConflictException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

    const emailRegex = /^[a-zA-Z0-9._%+-]+@gmail\.com$/;
    if (!emailRegex.test(data.email)) {
      throw new BadRequestException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
    }

    const tempPassword = Math.random().toString(36).slice(-8);
    const hashedPassword = await bcrypt.hash(tempPassword, 10);

    const created = await this.usersService.create({
      ...data,
      password: hashedPassword,
      role: 'intern',
    });

    const token = jwt.sign(
      { id: created._id },
      process.env.JWT_SECRET as string,
    );

    created.verifyToken = token;
    await created.save(); // üîπ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ

    const obj: any = created.toObject();
    delete obj.password;

    await this.mailService.sendMail(
      data.email,
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Aristocrat!',
      `
  <div style="
    font-family: Arial, sans-serif;
    background-color: #eeeeee;
    padding: 30px;
    border-radius: 12px;
  ">
    <div style="
      max-width: 600px;
      margin: 0 auto;
      background: white;
      border-radius: 12px;
      padding: 30px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    ">
<h2 style="color:#222222;">
  –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <span style="color: #ffd700">${data.fullName}</span>!
</h2>
      <p style="color: #222222; font-size: 16px; line-height: 1.6;">
        –í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç–µ–ª—è <b style="color:#ffc616">Aristocrat</b> –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –∫–∞–∫ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
        –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:
      </p>
<a href="http://localhost:3000/admin-panel/verify?token=${token}&email=${data.email}"
   style="
     display: inline-block;
     margin-top: 20px;
     background: #ffc616;
     color: white;
     text-decoration: none;
     padding: 12px 20px;
     font-size: 18px;
     border-radius: 8px;
     font-weight: bold;
     transition: background 0.3s ease;
   "
>–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</a>


      <p style="color: #999; font-size: 14px; margin-top: 30px;">
        –ï—Å–ª–∏ –≤—ã –Ω–µ –æ–∂–∏–¥–∞–µ—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ.
      </p>
    </div>
    <p style="text-align:center; color:#aaa; font-size:12px; margin-top:15px;">
      ¬© ${new Date().getFullYear()} Aristocrat. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
    </p>
  </div>
  `,
    );

    return {
      ...obj,
      token,
      tempPassword,
    };
  }

  async verify({ password, email, token }) {
    const user = await this.usersService.findByEmail(email);
    if (!user) throw new ConflictException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    if (user.isVerification)
      throw new ConflictException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
    if (user.verifyToken !== token)
      throw new ConflictException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    const hashedPassword = await bcrypt.hash(password, 10);

    user.password = hashedPassword;
    user.isVerification = true;
    user.verifyToken = null;
    await user.save();
  }

  async login(email: string, password: string) {
    const user = await this.usersService.findByEmail(email);
    if (!user) throw new ConflictException('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    const match = await bcrypt.compare(password, user.password);
    if (!match) throw new ConflictException('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');

    const payload = { sub: user._id, email: user.email, role: user.role };

    return {
      access_token: this.jwtService.sign(payload),
    };
  }
}
